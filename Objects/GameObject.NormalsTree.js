NormalsTree = function(ctx,vec3_position,size) {
  this.vec3_position = vec3_position;
  this.size = size;

	GameObject.call(this,ctx);
}
NormalsTree.prototype = Object.create(GameObject.prototype);
NormalsTree.prototype.constructor = NormalsTree;

NormalsTree.prototype.initBuffers = function(ctx) {

	const positionBuffer = ctx.createBuffer();

  ctx.bindBuffer(ctx.ARRAY_BUFFER, positionBuffer);
  
 const positions =  [
  -0.00544,    -0.809443,    -0.939428,
  0.019167,    3.227034,    0.022684,
  0.637348,    -0.809443,    -0.705472,
  0.028745,    3.227034,    0.02617,
  0.979368,    -1.00352,    -0.113076,
  0.033842,    3.227034,    0.034997,
  0.860586,    -1.00352,    0.560572,
  0.032072,    3.227034,    0.045035,
  0.33658,    -0.809443,    1.000265,
  0.024263,    3.227034,    0.051587,
  -0.353069,    -0.872769,    0.994068,
  0.01407,    3.227034,    0.051587,
  -0.871465,    -1.00352,    0.560572,
  0.006262,    3.227034,    0.045035,
  -0.990247,    -1.00352,    -0.113076,
  0.004492,    3.227034,    0.034997,
  -0.653837,    -1.066847,    -0.711668,
  0.009589,    3.227034,    0.02617,
  -0.00229,    -0.453387,    -0.816288,
  0.559453,    -0.453387,    -0.61183,
  0.858351,    -0.453387,    -0.094124,
  0.754545,    -0.453387,    0.494589,
  0.296607,    -0.453387,    0.878845,
  -0.306797,    -0.516713,    0.872648,
  -0.759126,    -0.453387,    0.494589,
  -0.862932,    -0.453387,    -0.094124,
  -0.569643,    -0.516713,    -0.618026,
  0.015024,    2.516458,    -0.139296,
  0.131209,    2.516458,    -0.097008,
  0.193029,    2.516458,    0.010068,
  0.171559,    2.516458,    0.13183,
  0.076845,    2.516458,    0.211305,
  -0.052405,    2.453131,    0.205109,
  -0.141511,    2.516458,    0.13183,
  -0.162981,    2.516458,    0.010068,
  -0.106769,    2.453131,    -0.103204,
  0.242392,    1.745409,    -0.230669,
  0.365764,    1.745409,    -0.016983,
  0.322917,    1.745409,    0.226012,
  0.133901,    1.745409,    0.384616,
  -0.118452,    1.682083,    0.37842,
  -0.30186,    1.745409,    0.226012,
  -0.344706,    1.745409,    -0.016983,
  -0.226943,    1.682082,    -0.236866,
  0.010529,    1.745409,    -0.315061,
  0.365054,    0.894761,    -0.378129,
  0.556331,    0.894761,    -0.046827,
  0.489901,    0.894761,    0.329917,
  0.196847,    0.894761,    0.575818,
  -0.191317,    0.831434,    0.569622,
  -0.478762,    0.894761,    0.329916,
  -0.545192,    0.894761,    -0.046827,
  -0.359524,    0.831434,    -0.384325,
  0.005569,    0.894761,    -0.508971,
  0.47439,    0.136519,    -0.50957,
  0.726197,    0.136518,    -0.073428,
  0.638746,    0.136519,    0.422534,
  0.252955,    0.136519,    0.74625,
  -0.256267,    0.073192,    0.740054,
  -0.636448,    0.136519,    0.422534,
  -0.723899,    0.136518,    -0.073428,
  -0.477702,    0.073192,    -0.515766,
  0.001149,    0.136518,    -0.681816,
  0.015674,    2.466367,    -0.253986,
  0.199847,    2.466368,    -0.186952,
  0.292234,    2.403041,    -0.023413,
  0.263809,    2.466367,    0.175798,
  0.11367,    2.466367,    0.30178,
  -0.087932,    2.403041,    0.295584,
  -0.232462,    2.466367,    0.175798,
  -0.266496,    2.466367,    -0.017217,
  -0.174109,    2.403041,    -0.193148,
  0.010725,    1.692862,    -0.451635,
  0.324917,    1.692862,    -0.337279,
  0.486486,    1.629535,    -0.053915,
  0.434034,    1.692862,    0.281558,
  0.177903,    1.692862,    0.496478,
  -0.162062,    1.629536,    0.490282,
  -0.412585,    1.692862,    0.281558,
  -0.470645,    1.692862,    -0.047718,
  -0.309076,    1.629535,    -0.343475,
  0.005286,    0.842699,    -0.671042,
  0.463775,    0.842699,    -0.504165,
  0.702124,    0.779372,    -0.087815,
  0.623007,    0.842699,    0.398883,
  0.249243,    0.842699,    0.712509,
  -0.244281,    0.779373,    0.706312,
  -0.612436,    0.842699,    0.398883,
  -0.697161,    0.842699,    -0.081619,
  -0.458813,    0.779373,    -0.510362,
  0.000399,    0.078844,    -0.831178,
  0.564756,    0.078845,    -0.625769,
  0.859436,    0.015518,    -0.11185,
  0.760756,    0.078844,    0.485799,
  0.300687,    0.078845,    0.871843,
  -0.305499,    0.015518,    0.865646,
  -0.759959,    0.078845,    0.485799,
  -0.864248,    0.078844,    -0.105654,
  -0.569569,    0.015518,    -0.631965,
  0.669916,    -0.51294,    -0.752068,
  1.022565,    -0.576267,    -0.137744,
  0.903752,    -0.51294,    0.574081,
  0.35487,    -0.51294,    1.034648,
  -0.367254,    -0.576267,    1.028452,
  -0.910528,    -0.51294,    0.574081,
  -1.034949,    -0.512941,    -0.131548,
  -0.682301,    -0.576267,    -0.758265,
  -0.003388,    -0.512941,    -0.997131,
  0.747414,    -1.054853,    -0.845319,
  1.143143,    -1.118179,    -0.156378,
  1.009368,    -1.054853,    0.6403,
  0.394483,    -1.054853,    1.15625,
  -0.413802,    -1.118179,    1.150053,
  -1.023078,    -1.054853,    0.640299,
  -1.162461,    -1.054853,    -0.150182,
  -0.766733,    -1.118179,    -0.851516,
  -0.006855,    -1.054853,    -1.119851,
  -0.018886,    -1.895607,    -0.373037,
  -0.018886,    -0.720161,    -0.373037,
  0.231064,    -1.895607,    -0.282063,
  0.231064,    -0.720161,    -0.282063,
  0.36406,    -1.895607,    -0.051708,
  0.36406,    -0.720161,    -0.051708,
  0.317871,    -1.895607,    0.210242,
  0.317871,    -0.720161,    0.210242,
  0.11411,    -1.895607,    0.381218,
  0.11411,    -0.720161,    0.381218,
  -0.151881,    -1.895607,    0.381218,
  -0.151881,    -0.720161,    0.381218,
  -0.355642,    -1.895607,    0.210242,
  -0.355642,    -0.720161,    0.210242,
  -0.401831,    -1.895607,    -0.051708,
  -0.401831,    -0.720161,    -0.051708,
  -0.268836,    -1.895607,    -0.282063,
  -0.268836,    -0.720161,    -0.282063,
  -0.018886,    -1.31439,    -0.264436,
  0.161257,    -1.31439,    -0.19887,
  0.257109,    -1.31439,    -0.03285,
  0.22382,    -1.31439,    0.155942,
  0.076966,    -1.31439,    0.279167,
  -0.114738,    -1.31439,    0.279166,
  -0.261591,    -1.31439,    0.155942,
  -0.29488,    -1.31439,    -0.03285,
  -0.199028,    -1.31439,    -0.19887,
];
  ctx.bufferData(ctx.ARRAY_BUFFER,
                new Float32Array(positions),
                ctx.STATIC_DRAW);

  this.position = positionBuffer;



  const normals = [
  0.01023745,    -0.9724923,    0.2327102,  1.0,
  -0.1325602,    0.591951,    -0.794998,  1.0,
  -0.4568241,    -0.8105035,    0.3666004,  1.0,
  0.1815762,    0.9488869,    -0.2581545, 1.0,
  -0.3285136,    -0.9436464,    0.04012754, 1.0,
  0.7988998,    0.562716,    -0.2123909,  1.0,
  -0.3019404,    -0.9306212,    -0.2068238, 1.0,
  0.6404216,    0.7389225,    0.2094131,  1.0,
  -0.07415063,    -0.8682719,    -0.4905156,  1.0,
  0.2805853,    0.7409087,    0.6101854,  1.0,
  0.234749,    -0.8827561,    -0.4069822, 1.0,
  -0.1899323,    0.7194856,    0.6680316, 1.0,
  0.2364509,    -0.9635733,    -0.1249696,  1.0,
  -0.5054041,    0.7406413,    0.4427384, 1.0,
  0.1623797,    -0.9837714,    0.07633181,  1.0,
  -0.6671034,    0.7433308,    -0.04931922, 1.0,
  0.2581211,    -0.900976,    0.3487345,  1.0,
  -0.48664,    0.732281,    -0.4763885, 1.0,
  -0.1737527,    -0.6778425,    -0.7143805, 1.0,
  0.205402,    -0.6959016,    -0.6881359, 1.0,
  0.5725008,    -0.7490286,    -0.3334651,  1.0,
  0.6761177,    -0.7144883,    0.1799206, 1.0,
  0.4694948,    -0.671558,    0.5732228,  1.0,
  -0.1085285,    -0.7058733,    0.6999745,  1.0,
  -0.5174872,    -0.6855163,    0.5121273,  1.0,
  -0.7425975,    -0.6603743,    0.111601, 1.0,
  -0.5624405,    -0.6941006,    -0.4493163, 1.0,
  -0.1257113,    -0.7276294,    -0.6743529, 1.0,
  0.05208985,    -0.7044002,    -0.7078891, 1.0,
  0.4486764,    -0.8402932,    -0.3042972,  1.0,
  0.6131495,    -0.7789459,    0.1314955, 1.0,
  0.6088571,    -0.6458079,    0.4606791, 1.0,
  -0.1912099,    -0.8001665,    0.5684824,  1.0,
  -0.4856388,    -0.7426244,    0.4611552,  1.0,
  -0.7233229,    -0.6374935,    0.2653413,  1.0,
  -0.4458976,    -0.7805577,    -0.4380696, 1.0,
  0.1280251,    -0.7234592,    -0.6783925,  1.0,
  0.4957522,    -0.807468,    -0.319727,  1.0,
  0.6300147,    -0.7614307,    0.1526589, 1.0,
  0.5219505,    -0.6870118,    0.5055518, 1.0,
  -0.1280372,    -0.7719585,    0.6226448,  1.0,
  -0.4874511,    -0.7322678,    0.4755791,  1.0,
  -0.714086,    -0.676549,    0.1798965,  1.0,
  -0.497583,    -0.7559165,    -0.4254427,  1.0,
  -0.1473377,    -0.7206769,    -0.6774337, 1.0,
  0.1902045,    -0.7218184,    -0.6654325,  1.0,
  0.5419132,    -0.7833569,    -0.3044374,  1.0,
  0.643816,    -0.7426189,    0.1844404,  1.0,
  0.4701771,    -0.691051,    0.5489826,  1.0,
  -0.1258651,    -0.7415916,    0.6589384,  1.0,
  -0.5108147,    -0.7144777,    0.4781106,  1.0,
  -0.722851,    -0.680018,    0.1227265,  1.0,
  -0.5223403,    -0.7294717,    -0.4416237, 1.0,
  -0.1445261,    -0.7057459,    -0.6935669, 1.0,
  0.1523281,    -0.7101567,    -0.6873671,  1.0,
  0.5235359,    -0.7715983,    -0.3613119,  1.0,
  0.6594324,    -0.7376157,    0.1451616, 1.0,
  0.4908584,    -0.6882166,    0.5342433, 1.0,
  -0.0876098,    -0.7341318,    0.6733313,  1.0,
  -0.4847845,    -0.7085962,    0.5127137,  1.0,
  -0.7223781,    -0.6765763,    0.1428786,  1.0,
  -0.5513982,    -0.7194369,    -0.4223394, 1.0,
  -0.1866286,    -0.6988704,    -0.6904708, 1.0,
  0.3856353,    -0.6451226,    -0.6596228,  1.0,
  0.5443299,    -0.774071,    -0.323294,  1.0,
  0.5379269,    -0.8404729,    0.06511554,  1.0,
  0.283685,    -0.7351127,    0.6157372,  1.0,
  0.0455626,    -0.758895,    0.6496171,  1.0,
  -0.2476753,    -0.8074731,    0.5353915,  1.0,
  -0.7647744,    -0.6426874,    -0.04552809,  1.0,
  -0.6254094,    -0.7387339,    -0.2512677, 1.0,
  -0.3621522,    -0.7856903,    -0.5015342, 1.0,
  0.2928424,    -0.6835878,    -0.6685439,  1.0,
  0.5400766,    -0.7556545,    -0.370545, 1.0,
  0.5770961,    -0.8106351,    0.09915058,  1.0,
  0.3393001,    -0.7414247,    0.5789343, 1.0,
  0.01839068,    -0.7453839,    0.6663817,  1.0,
  -0.3013803,    -0.7706181,    0.5615316,  1.0,
  -0.7194507,    -0.6921268,    0.0578892,  1.0,
  -0.6206783,    -0.730697,    -0.2843243,  1.0,
  -0.3431942,    -0.7568451,    -0.5562403, 1.0,
  0.2436486,    -0.6805804,    -0.6909745,  1.0,
  0.5452524,    -0.7331839,    -0.4063756,  1.0,
  0.617497,    -0.7820883,    0.08387684, 1.0,
  0.3963845,    -0.7308656,    0.555621,  1.0,
  0.05799704,    -0.720664,    0.6908543, 1.0,
  -0.3310921,    -0.7383984,    0.587491, 1.0,
  -0.7160721,    -0.6875425,    0.1205243,  1.0,
  -0.6490113,    -0.7091711,    -0.275428,  1.0,
  -0.3492962,    -0.7282506,    -0.5896128, 1.0,
  0.2487402,    -0.7033216,    -0.6659332,  1.0,
  0.5442013,    -0.7507507,    -0.3744574,  1.0,
  0.5934772,    -0.794714,    0.1273357,  1.0,
  0.3569175,    -0.747141,    0.5607052,  1.0,
  0.03028824,    -0.739632,    0.6723296, 1.0,
  -0.3549491,    -0.7562449,    0.5496407,  1.0,
  -0.6967885,    -0.7103319,    0.09957135, 1.0,
  -0.6194436,    -0.7279927,    -0.2937964, 1.0,
  -0.3092686,    -0.7444403,    -0.5917446, 1.0,
  0.5707449,    -0.7098922,    -0.4126784,  1.0,
  0.649318,    -0.753504,    0.1030433, 1.0,
  0.415828,    -0.7101982,    0.5680718,  1.0,
  0.05367243,    -0.6968185,    0.7152366,  1.0,
  -0.3677812,    -0.7096967,    0.6008889,  1.0,
  -0.7274953,    -0.6718187,    0.1393205,  1.0,
  -0.6636879,    -0.6857233,    -0.2988344, 1.0,
  -0.3436224,    -0.699189,    -0.6269436,  1.0,
  0.234426,    -0.6655474,    -0.7085838, 1.0,
  0.7510268,    -0.6532866,    0.09578782,  1.0,
  0.5781819,    -0.7770198,    0.2488898, 1.0,
  0.3687138,    -0.7334243,    0.5710858, 1.0,
  -0.4168654,    -0.6373021,    0.6481275,  1.0,
  -0.7190195,    -0.6666683,    0.196378, 1.0,
  -0.698662,    -0.7153074,    -0.01437552, 1.0,
  -0.6867898,    -0.6660613,    -0.2910018, 1.0,
  -0.3398555,    -0.7134342,    -0.6127887, 1.0,
  0.5890267,    -0.6195254,    -0.5188795,  1.0,
  0.0477262,    -0.9181592,    -0.3933268,  1.0,
  -0.1186299,    0.1731764,    -0.9777203,  1.0,
  0.7197996,    -0.1695822,    -0.6731495,  1.0,
  0.2160921,    0.9183029,    -0.3316986, 1.0,
  0.8824413,    -0.4680131,    -0.0475501,  1.0,
  0.9422612,    0.1731725,    -0.2866268, 1.0,
  0.7065397,    -0.4680249,    0.5308052, 1.0,
  0.8117886,    0.4704509,    0.3459411,  1.0,
  0.2000351,    -0.4680335,    0.8607733, 1.0,
  0.3994705,    0.4704419,    0.7868339,  1.0,
  -0.4000667,    -0.4680294,    0.787969, 1.0,
  -0.1997335,    0.4704377,    0.8595318, 1.0,
  -0.8129785,    -0.4680211,    0.3464424,  1.0,
  -0.705502,    0.4704503,    0.5300409,  1.0,
  -0.8454725,    -0.4680113,    -0.2571803, 1.0,
  -0.881149,    0.4704485,    -0.0474831, 1.0,
  -0.5379672,    -0.1695858,    -0.825731,  1.0,
  -0.644493,    0.4704506,    -0.602748,  1.0,
  0.000003600544,    0.001944267,    -0.9999982,  1.0,
  0.6428248,    0.001944196,    -0.7660108, 1.0,
  0.9848069,    0.001944166,    -0.1736422, 1.0,
  0.8660128,    0.001944201,    0.5000181,  1.0,
  0.341978,    0.001944188,    0.9397059, 1.0,
  -0.3420532,    0.001944206,    0.9396786, 1.0,
  -0.866053,    0.00194421,    0.4999485, 1.0,
  -0.984794,    0.001944176,    -0.1737151, 1.0,
  -0.6427664,    0.001944183,    -0.7660597,  1.0,
];
  
  

  const normalizedNormalsBuffer = ctx.createBuffer();
  
  ctx.bindBuffer(ctx.ARRAY_BUFFER, normalizedNormalsBuffer);

  ctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array(normals), ctx.STATIC_DRAW);
  
  this.colors = normalizedNormalsBuffer;


  const indexBuffer = ctx.createBuffer();
  ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, indexBuffer);


 const indicesArray = [
  63,    1,    3,
  63,    3,    64,
  64,    3,    5,
  64,    5,    65,
  65,    5,    7,
  65,    7,    66,
  66,    7,    9,
  66,    9,    67,
  67,    9,    11,
  67,    11,    68,
  68,    11,    13,
  68,    13,    69,
  69,    13,    15,
  69,    15,    70,
  3,    1,    17,
  3,    17,    15,
  3,    15,    13,
  3,    13,    11,
  3,    11,    9,
  3,    9,    7,
  3,    7,    5,
  71,    17,    1,
  71,    1,    63,
  70,    15,    17,
  70,    17,    71,
  0,    2,    4,
  0,    4,    6,
  0,    6,    8,
  0,    8,    10,
  0,    10,    12,
  0,    12,    14,
  0,    14,    16,
  114,    25,    26,
  114,    26,    115,
  115,    26,    18,
  115,    18,    116,
  113,    24,    25,
  113,    25,    114,
  112,    23,    24,
  112,    24,    113,
  111,    22,    23,
  111,    23,    112,
  110,    21,    22,
  110,    22,    111,
  109,    20,    21,
  109,    21,    110,
  108,    19,    20,
  108,    20,    109,
  116,    18,    19,
  116,    19,    108,
  79,    34,    35,
  79,    35,    80,
  80,    35,    27,
  80,    27,    72,
  78,    33,    34,
  78,    34,    79,
  77,    32,    33,
  77,    33,    78,
  76,    31,    32,
  76,    32,    77,
  75,    30,    31,
  75,    31,    76,
  74,    29,    30,
  74,    30,    75,
  73,    28,    29,
  73,    29,    74,
  72,    27,    28,
  72,    28,    73,
  81,    44,    36,
  81,    36,    82,
  82,    36,    37,
  82,    37,    83,
  83,    37,    38,
  83,    38,    84,
  84,    38,    39,
  84,    39,    85,
  85,    39,    40,
  85,    40,    86,
  86,    40,    41,
  86,    41,    87,
  87,    41,    42,
  87,    42,    88,
  89,    43,    44,
  89,    44,    81,
  88,    42,    43,
  88,    43,    89,
  97,    51,    52,
  97,    52,    98,
  98,    52,    53,
  98,    53,    90,
  96,    50,    51,
  96,    51,    97,
  95,    49,    50,
  95,    50,    96,
  94,    48,    49,
  94,    49,    95,
  93,    47,    48,
  93,    48,    94,
  92,    46,    47,
  92,    47,    93,
  91,    45,    46,
  91,    46,    92,
  90,    53,    45,
  90,    45,    91,
  107,    62,    54,
  107,    54,    99,
  99,    54,    55,
  99,    55,    100,
  100,    55,    56,
  100,    56,    101,
  101,    56,    57,
  101,    57,    102,
  102,    57,    58,
  102,    58,    103,
  103,    58,    59,
  103,    59,    104,
  104,    59,    60,
  104,    60,    105,
  106,    61,    62,
  106,    62,    107,
  105,    60,    61,
  105,    61,    106,
  34,    70,    71,
  34,    71,    35,
  35,    71,    63,
  35,    63,    27,
  33,    69,    70,
  33,    70,    34,
  32,    68,    69,
  32,    69,    33,
  31,    67,    68,
  31,    68,    32,
  30,    66,    67,
  30,    67,    31,
  29,    65,    66,
  29,    66,    30,
  28,    64,    65,
  28,    65,    29,
  27,    63,    64,
  27,    64,    28,
  44,    72,    73,
  44,    73,    36,
  36,    73,    74,
  36,    74,    37,
  37,    74,    75,
  37,    75,    38,
  38,    75,    76,
  38,    76,    39,
  39,    76,    77,
  39,    77,    40,
  40,    77,    78,
  40,    78,    41,
  41,    78,    79,
  41,    79,    42,
  43,    80,    72,
  43,    72,    44,
  42,    79,    80,
  42,    80,    43,
  51,    88,    89,
  51,    89,    52,
  52,    89,    81,
  52,    81,    53,
  50,    87,    88,
  50,    88,    51,
  49,    86,    87,
  49,    87,    50,
  48,    85,    86,
  48,    86,    49,
  47,    84,    85,
  47,    85,    48,
  46,    83,    84,
  46,    84,    47,
  45,    82,    83,
  45,    83,    46,
  53,    81,    82,
  53,    82,    45,
  62,    90,    91,
  62,    91,    54,
  54,    91,    92,
  54,    92,    55,
  55,    92,    93,
  55,    93,    56,
  56,    93,    94,
  56,    94,    57,
  57,    94,    95,
  57,    95,    58,
  58,    95,    96,
  58,    96,    59,
  59,    96,    97,
  59,    97,    60,
  61,    98,    90,
  61,    90,    62,
  60,    97,    98,
  60,    98,    61,
  25,    105,    106,
  25,    106,    26,
  26,    106,    107,
  26,    107,    18,
  24,    104,    105,
  24,    105,    25,
  23,    103,    104,
  23,    104,    24,
  22,    102,    103,
  22,    103,    23,
  21,    101,    102,
  21,    102,    22,
  20,    100,    101,
  20,    101,    21,
  19,    99,    100,
  19,    100,    20,
  18,    107,    99,
  18,    99,    19,
  0,    116,    108,
  0,    108,    2,
  2,    108,    109,
  2,    109,    4,
  4,    109,    110,
  4,    110,    6,
  6,    110,    111,
  6,    111,    8,
  8,    111,    112,
  8,    112,    10,
  10,    112,    113,
  10,    113,    12,
  12,    113,    114,
  12,    114,    14,
  16,    115,    116,
  16,    116,    0,
  14,    114,    115,
  14,    115,    16,
  135,    118,    120,
  135,    120,    136,
  136,    120,    122,
  136,    122,    137,
  137,    122,    124,
  137,    124,    138,
  138,    124,    126,
  138,    126,    139,
  139,    126,    128,
  139,    128,    140,
  140,    128,    130,
  140,    130,    141,
  141,    130,    132,
  141,    132,    142,
  120,    118,    134,
  120,    134,    132,
  120,    132,    130,
  120,    130,    128,
  120,    128,    126,
  120,    126,    124,
  120,    124,    122,
  143,    134,    118,
  143,    118,    135,
  142,    132,    134,
  142,    134,    143,
  117,    119,    121,
  117,    121,    123,
  117,    123,    125,
  117,    125,    127,
  117,    127,    129,
  117,    129,    131,
  117,    131,    133,
  131,    142,    143,
  131,    143,    133,
  133,    143,    135,
  133,    135,    117,
  129,    141,    142,
  129,    142,    131,
  127,    140,    141,
  127,    141,    129,
  125,    139,    140,
  125,    140,    127,
  123,    138,    139,
  123,    139,    125,
  121,    137,    138,
  121,    138,    123,
  119,    136,    137,
  119,    137,    121,
  117,    135,    136,
  117,    136,    119,
];
  // Now send the element array to GL

  ctx.bufferData(ctx.ELEMENT_ARRAY_BUFFER,
      new Uint16Array(indicesArray), ctx.STATIC_DRAW);
  this.indices_count = indicesArray.length;
  this.indices = indexBuffer;

};

NormalsTree.prototype.render = function(ctx,viewMatrix,projectionMatrix) {
	
    this.material.renderBind(ctx,this.transformMatrix,viewMatrix,projectionMatrix);


	    const numComponents = 3;  // pull out 2 values per iteration
	    const type = ctx.FLOAT;    // the data in the buffer is 32bit floats
	    const normalize = false;  // don't normalize
	    const stride = 0;         // how many bytes to get from one set of values to the next
	                 				// 0 = use type and numComponents above
	    const offset = 0;         // how many bytes inside the buffer to start from

		ctx.bindBuffer(ctx.ARRAY_BUFFER, this.position);
	    ctx.vertexAttribPointer(
	        this.material.programInfo.attribLocations.vertexPosition,
	        numComponents,
	        type,
	        normalize,
	        stride,
	        offset);

	    ctx.enableVertexAttribArray(
	        this.material.programInfo.attribLocations.vertexPosition);
	     
	    const numComponentsColor = 4;  // pull out 2 values per iteration
	 
		ctx.bindBuffer(ctx.ARRAY_BUFFER, this.colors);
	    ctx.vertexAttribPointer(
	        this.material.programInfo.attribLocations.vertexColor,
	        numComponentsColor,
	        type,
	        normalize,
	        stride,
	        offset);		

	    ctx.enableVertexAttribArray(
        	this.material.programInfo.attribLocations.vertexColor);
       
		
		ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, this.indices);

		    const vertexCount = this.indices_count;
		    const type2 = ctx.UNSIGNED_SHORT;
		    ctx.drawElements(ctx.TRIANGLES, vertexCount, type2, offset);

  
};
NormalsTree.prototype.update = function(time) {
  var x0 = this.vec3_position[0];
  var y0 = this.vec3_position[1];
  var z0 = this.vec3_position[2];

  this.transformMatrix = mat4.create();

  mat4.translate(this.transformMatrix,
    this.transformMatrix,
    [x0, y0, z0]);

  mat4.scale(this.transformMatrix,
    this.transformMatrix,
    [this.size, this.size * 0.6, this.size]);

};
