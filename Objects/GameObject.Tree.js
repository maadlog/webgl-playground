class Tree extends GameObject {
  constructor(ctx,vec3_position,size) {
    super(ctx);
    this.vec3_position = vec3_position;
    this.size = size;

    this.Wireframe = new Wireframe(ctx);
  }

  getColorsArray() {
   // Convert the array of colors into a table for all the vertices.
   let colorsArray = [];

   //Leaves
   for (var j = 0; j < 117 ; ++j) {
    const green = [0.0,  1.0,  0.0,  1.0];
    colorsArray = colorsArray.concat(green);
   }
   //Bark
   for (var j = 117; j < 144 ; ++j) {
    const brown = [0.43,  0.21,  0.1,  1.0];
    colorsArray = colorsArray.concat(brown);
   }

   return colorsArray;
  }

  initBuffers(ctx) {
    const positionBuffer = ctx.createBuffer();

    ctx.bindBuffer(ctx.ARRAY_BUFFER, positionBuffer);

   const positions =  [
    -0.00544,    -0.809443,    -0.939428,
    0.019167,    3.227034,    0.022684,
    0.637348,    -0.809443,    -0.705472,
    0.028745,    3.227034,    0.02617,
    0.979368,    -1.00352,    -0.113076,
    0.033842,    3.227034,    0.034997,
    0.860586,    -1.00352,    0.560572,
    0.032072,    3.227034,    0.045035,
    0.33658,    -0.809443,    1.000265,
    0.024263,    3.227034,    0.051587,
    -0.353069,    -0.872769,    0.994068,
    0.01407,    3.227034,    0.051587,
    -0.871465,    -1.00352,    0.560572,
    0.006262,    3.227034,    0.045035,
    -0.990247,    -1.00352,    -0.113076,
    0.004492,    3.227034,    0.034997,
    -0.653837,    -1.066847,    -0.711668,
    0.009589,    3.227034,    0.02617,
    -0.00229,    -0.453387,    -0.816288,
    0.559453,    -0.453387,    -0.61183,
    0.858351,    -0.453387,    -0.094124,
    0.754545,    -0.453387,    0.494589,
    0.296607,    -0.453387,    0.878845,
    -0.306797,    -0.516713,    0.872648,
    -0.759126,    -0.453387,    0.494589,
    -0.862932,    -0.453387,    -0.094124,
    -0.569643,    -0.516713,    -0.618026,
    0.015024,    2.516458,    -0.139296,
    0.131209,    2.516458,    -0.097008,
    0.193029,    2.516458,    0.010068,
    0.171559,    2.516458,    0.13183,
    0.076845,    2.516458,    0.211305,
    -0.052405,    2.453131,    0.205109,
    -0.141511,    2.516458,    0.13183,
    -0.162981,    2.516458,    0.010068,
    -0.106769,    2.453131,    -0.103204,
    0.242392,    1.745409,    -0.230669,
    0.365764,    1.745409,    -0.016983,
    0.322917,    1.745409,    0.226012,
    0.133901,    1.745409,    0.384616,
    -0.118452,    1.682083,    0.37842,
    -0.30186,    1.745409,    0.226012,
    -0.344706,    1.745409,    -0.016983,
    -0.226943,    1.682082,    -0.236866,
    0.010529,    1.745409,    -0.315061,
    0.365054,    0.894761,    -0.378129,
    0.556331,    0.894761,    -0.046827,
    0.489901,    0.894761,    0.329917,
    0.196847,    0.894761,    0.575818,
    -0.191317,    0.831434,    0.569622,
    -0.478762,    0.894761,    0.329916,
    -0.545192,    0.894761,    -0.046827,
    -0.359524,    0.831434,    -0.384325,
    0.005569,    0.894761,    -0.508971,
    0.47439,    0.136519,    -0.50957,
    0.726197,    0.136518,    -0.073428,
    0.638746,    0.136519,    0.422534,
    0.252955,    0.136519,    0.74625,
    -0.256267,    0.073192,    0.740054,
    -0.636448,    0.136519,    0.422534,
    -0.723899,    0.136518,    -0.073428,
    -0.477702,    0.073192,    -0.515766,
    0.001149,    0.136518,    -0.681816,
    0.015674,    2.466367,    -0.253986,
    0.199847,    2.466368,    -0.186952,
    0.292234,    2.403041,    -0.023413,
    0.263809,    2.466367,    0.175798,
    0.11367,    2.466367,    0.30178,
    -0.087932,    2.403041,    0.295584,
    -0.232462,    2.466367,    0.175798,
    -0.266496,    2.466367,    -0.017217,
    -0.174109,    2.403041,    -0.193148,
    0.010725,    1.692862,    -0.451635,
    0.324917,    1.692862,    -0.337279,
    0.486486,    1.629535,    -0.053915,
    0.434034,    1.692862,    0.281558,
    0.177903,    1.692862,    0.496478,
    -0.162062,    1.629536,    0.490282,
    -0.412585,    1.692862,    0.281558,
    -0.470645,    1.692862,    -0.047718,
    -0.309076,    1.629535,    -0.343475,
    0.005286,    0.842699,    -0.671042,
    0.463775,    0.842699,    -0.504165,
    0.702124,    0.779372,    -0.087815,
    0.623007,    0.842699,    0.398883,
    0.249243,    0.842699,    0.712509,
    -0.244281,    0.779373,    0.706312,
    -0.612436,    0.842699,    0.398883,
    -0.697161,    0.842699,    -0.081619,
    -0.458813,    0.779373,    -0.510362,
    0.000399,    0.078844,    -0.831178,
    0.564756,    0.078845,    -0.625769,
    0.859436,    0.015518,    -0.11185,
    0.760756,    0.078844,    0.485799,
    0.300687,    0.078845,    0.871843,
    -0.305499,    0.015518,    0.865646,
    -0.759959,    0.078845,    0.485799,
    -0.864248,    0.078844,    -0.105654,
    -0.569569,    0.015518,    -0.631965,
    0.669916,    -0.51294,    -0.752068,
    1.022565,    -0.576267,    -0.137744,
    0.903752,    -0.51294,    0.574081,
    0.35487,    -0.51294,    1.034648,
    -0.367254,    -0.576267,    1.028452,
    -0.910528,    -0.51294,    0.574081,
    -1.034949,    -0.512941,    -0.131548,
    -0.682301,    -0.576267,    -0.758265,
    -0.003388,    -0.512941,    -0.997131,
    0.747414,    -1.054853,    -0.845319,
    1.143143,    -1.118179,    -0.156378,
    1.009368,    -1.054853,    0.6403,
    0.394483,    -1.054853,    1.15625,
    -0.413802,    -1.118179,    1.150053,
    -1.023078,    -1.054853,    0.640299,
    -1.162461,    -1.054853,    -0.150182,
    -0.766733,    -1.118179,    -0.851516,
    -0.006855,    -1.054853,    -1.119851,
    -0.018886,    -1.895607,    -0.373037,
    -0.018886,    -0.720161,    -0.373037,
    0.231064,    -1.895607,    -0.282063,
    0.231064,    -0.720161,    -0.282063,
    0.36406,    -1.895607,    -0.051708,
    0.36406,    -0.720161,    -0.051708,
    0.317871,    -1.895607,    0.210242,
    0.317871,    -0.720161,    0.210242,
    0.11411,    -1.895607,    0.381218,
    0.11411,    -0.720161,    0.381218,
    -0.151881,    -1.895607,    0.381218,
    -0.151881,    -0.720161,    0.381218,
    -0.355642,    -1.895607,    0.210242,
    -0.355642,    -0.720161,    0.210242,
    -0.401831,    -1.895607,    -0.051708,
    -0.401831,    -0.720161,    -0.051708,
    -0.268836,    -1.895607,    -0.282063,
    -0.268836,    -0.720161,    -0.282063,
    -0.018886,    -1.31439,    -0.264436,
    0.161257,    -1.31439,    -0.19887,
    0.257109,    -1.31439,    -0.03285,
    0.22382,    -1.31439,    0.155942,
    0.076966,    -1.31439,    0.279167,
    -0.114738,    -1.31439,    0.279166,
    -0.261591,    -1.31439,    0.155942,
    -0.29488,    -1.31439,    -0.03285,
    -0.199028,    -1.31439,    -0.19887,
  ];
    ctx.bufferData(ctx.ARRAY_BUFFER,
                  new Float32Array(positions),
                  ctx.STATIC_DRAW);

    this.position = positionBuffer;




    var colorsArray = this.getColorsArray();

    const colorBuffer = ctx.createBuffer();

    ctx.bindBuffer(ctx.ARRAY_BUFFER, colorBuffer);

    ctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array(colorsArray), ctx.STATIC_DRAW);

    this.colors = colorBuffer;

    const indexBuffer = ctx.createBuffer();
    ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, indexBuffer);


   const indicesArray = [
    63,    1,    3,
    63,    3,    64,
    64,    3,    5,
    64,    5,    65,
    65,    5,    7,
    65,    7,    66,
    66,    7,    9,
    66,    9,    67,
    67,    9,    11,
    67,    11,    68,
    68,    11,    13,
    68,    13,    69,
    69,    13,    15,
    69,    15,    70,
    3,    1,    17,
    3,    17,    15,
    3,    15,    13,
    3,    13,    11,
    3,    11,    9,
    3,    9,    7,
    3,    7,    5,
    71,    17,    1,
    71,    1,    63,
    70,    15,    17,
    70,    17,    71,
    0,    2,    4,
    0,    4,    6,
    0,    6,    8,
    0,    8,    10,
    0,    10,    12,
    0,    12,    14,
    0,    14,    16,
    114,    25,    26,
    114,    26,    115,
    115,    26,    18,
    115,    18,    116,
    113,    24,    25,
    113,    25,    114,
    112,    23,    24,
    112,    24,    113,
    111,    22,    23,
    111,    23,    112,
    110,    21,    22,
    110,    22,    111,
    109,    20,    21,
    109,    21,    110,
    108,    19,    20,
    108,    20,    109,
    116,    18,    19,
    116,    19,    108,
    79,    34,    35,
    79,    35,    80,
    80,    35,    27,
    80,    27,    72,
    78,    33,    34,
    78,    34,    79,
    77,    32,    33,
    77,    33,    78,
    76,    31,    32,
    76,    32,    77,
    75,    30,    31,
    75,    31,    76,
    74,    29,    30,
    74,    30,    75,
    73,    28,    29,
    73,    29,    74,
    72,    27,    28,
    72,    28,    73,
    81,    44,    36,
    81,    36,    82,
    82,    36,    37,
    82,    37,    83,
    83,    37,    38,
    83,    38,    84,
    84,    38,    39,
    84,    39,    85,
    85,    39,    40,
    85,    40,    86,
    86,    40,    41,
    86,    41,    87,
    87,    41,    42,
    87,    42,    88,
    89,    43,    44,
    89,    44,    81,
    88,    42,    43,
    88,    43,    89,
    97,    51,    52,
    97,    52,    98,
    98,    52,    53,
    98,    53,    90,
    96,    50,    51,
    96,    51,    97,
    95,    49,    50,
    95,    50,    96,
    94,    48,    49,
    94,    49,    95,
    93,    47,    48,
    93,    48,    94,
    92,    46,    47,
    92,    47,    93,
    91,    45,    46,
    91,    46,    92,
    90,    53,    45,
    90,    45,    91,
    107,    62,    54,
    107,    54,    99,
    99,    54,    55,
    99,    55,    100,
    100,    55,    56,
    100,    56,    101,
    101,    56,    57,
    101,    57,    102,
    102,    57,    58,
    102,    58,    103,
    103,    58,    59,
    103,    59,    104,
    104,    59,    60,
    104,    60,    105,
    106,    61,    62,
    106,    62,    107,
    105,    60,    61,
    105,    61,    106,
    34,    70,    71,
    34,    71,    35,
    35,    71,    63,
    35,    63,    27,
    33,    69,    70,
    33,    70,    34,
    32,    68,    69,
    32,    69,    33,
    31,    67,    68,
    31,    68,    32,
    30,    66,    67,
    30,    67,    31,
    29,    65,    66,
    29,    66,    30,
    28,    64,    65,
    28,    65,    29,
    27,    63,    64,
    27,    64,    28,
    44,    72,    73,
    44,    73,    36,
    36,    73,    74,
    36,    74,    37,
    37,    74,    75,
    37,    75,    38,
    38,    75,    76,
    38,    76,    39,
    39,    76,    77,
    39,    77,    40,
    40,    77,    78,
    40,    78,    41,
    41,    78,    79,
    41,    79,    42,
    43,    80,    72,
    43,    72,    44,
    42,    79,    80,
    42,    80,    43,
    51,    88,    89,
    51,    89,    52,
    52,    89,    81,
    52,    81,    53,
    50,    87,    88,
    50,    88,    51,
    49,    86,    87,
    49,    87,    50,
    48,    85,    86,
    48,    86,    49,
    47,    84,    85,
    47,    85,    48,
    46,    83,    84,
    46,    84,    47,
    45,    82,    83,
    45,    83,    46,
    53,    81,    82,
    53,    82,    45,
    62,    90,    91,
    62,    91,    54,
    54,    91,    92,
    54,    92,    55,
    55,    92,    93,
    55,    93,    56,
    56,    93,    94,
    56,    94,    57,
    57,    94,    95,
    57,    95,    58,
    58,    95,    96,
    58,    96,    59,
    59,    96,    97,
    59,    97,    60,
    61,    98,    90,
    61,    90,    62,
    60,    97,    98,
    60,    98,    61,
    25,    105,    106,
    25,    106,    26,
    26,    106,    107,
    26,    107,    18,
    24,    104,    105,
    24,    105,    25,
    23,    103,    104,
    23,    104,    24,
    22,    102,    103,
    22,    103,    23,
    21,    101,    102,
    21,    102,    22,
    20,    100,    101,
    20,    101,    21,
    19,    99,    100,
    19,    100,    20,
    18,    107,    99,
    18,    99,    19,
    0,    116,    108,
    0,    108,    2,
    2,    108,    109,
    2,    109,    4,
    4,    109,    110,
    4,    110,    6,
    6,    110,    111,
    6,    111,    8,
    8,    111,    112,
    8,    112,    10,
    10,    112,    113,
    10,    113,    12,
    12,    113,    114,
    12,    114,    14,
    16,    115,    116,
    16,    116,    0,
    14,    114,    115,
    14,    115,    16,
    135,    118,    120,
    135,    120,    136,
    136,    120,    122,
    136,    122,    137,
    137,    122,    124,
    137,    124,    138,
    138,    124,    126,
    138,    126,    139,
    139,    126,    128,
    139,    128,    140,
    140,    128,    130,
    140,    130,    141,
    141,    130,    132,
    141,    132,    142,
    120,    118,    134,
    120,    134,    132,
    120,    132,    130,
    120,    130,    128,
    120,    128,    126,
    120,    126,    124,
    120,    124,    122,
    143,    134,    118,
    143,    118,    135,
    142,    132,    134,
    142,    134,    143,
    117,    119,    121,
    117,    121,    123,
    117,    123,    125,
    117,    125,    127,
    117,    127,    129,
    117,    129,    131,
    117,    131,    133,
    131,    142,    143,
    131,    143,    133,
    133,    143,    135,
    133,    135,    117,
    129,    141,    142,
    129,    142,    131,
    127,    140,    141,
    127,    141,    129,
    125,    139,    140,
    125,    140,    127,
    123,    138,    139,
    123,    139,    125,
    121,    137,    138,
    121,    138,    123,
    119,    136,    137,
    119,    137,    121,
    117,    135,    136,
    117,    136,    119,
  ];
    // Now send the element array to GL

    ctx.bufferData(ctx.ELEMENT_ARRAY_BUFFER,
        new Uint16Array(indicesArray), ctx.STATIC_DRAW);
    this.indices_count = indicesArray.length;
    this.indices = indexBuffer;

    this.Wireframe.initBuffers(ctx,positions,indicesArray);
  }

  render(ctx,viewMatrix,projectionMatrix) {
      super.render(ctx, viewMatrix, projectionMatrix);
      this.Wireframe.render(ctx,viewMatrix,projectionMatrix);
  }

  update(time) {
    var x0 = this.vec3_position[0];
    var y0 = this.vec3_position[1];
    var z0 = this.vec3_position[2];

    this.transformMatrix = mat4.create();

    mat4.translate(this.transformMatrix,
      this.transformMatrix,
      [x0, y0, z0]);

    mat4.scale(this.transformMatrix,
      this.transformMatrix,
      [this.size, this.size * 0.6, this.size]);

    this.Wireframe.updateMatrix(this.transformMatrix);
  }
}


